from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List

from ..data.files import get_recent_hobbies, get_all_hobbies, get_hobby_display_name
from ..data.reminders import get_user_reminders
from ..utils.dates import get_date_list


def create_hobby_keyboard(show_today_button: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —É–≤–ª–µ—á–µ–Ω–∏—è–º–∏"""
    buttons = []
    recent_hobbies = get_recent_hobbies(limit=10)
    
    if not recent_hobbies:
        buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ", callback_data="add_new")])
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(recent_hobbies), 2):
            row = []
            for j in range(i, min(i + 2, len(recent_hobbies))):
                hobby_key = recent_hobbies[j]
                hobby_display = get_hobby_display_name(hobby_key)
                row.append(InlineKeyboardButton(hobby_display, callback_data=f"hobby:{hobby_key}"))
            buttons.append(row)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    management_row = []
    if recent_hobbies:
        management_row.append(InlineKeyboardButton("üìã –í—Å–µ —É–≤–ª–µ—á–µ–Ω–∏—è", callback_data="list_all"))
    management_row.append(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ", callback_data="add_new"))
    
    buttons.append(management_row)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–∞—Ç—ã
    date_row = []
    if show_today_button:
        date_row.append(InlineKeyboardButton("üè† –°–µ–≥–æ–¥–Ω—è", callback_data="today"))
    date_row.append(InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="select_date"))
    date_row.append(InlineKeyboardButton("‚ö° –î—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="quick_dates"))
    buttons.append(date_row)
    
    buttons.append([
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders")
    ])
    
    return InlineKeyboardMarkup(buttons)


def create_score_keyboard(hobby_name: str, target_date: str = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ —Å –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ –æ—Ç 1 –¥–æ 5
    star_buttons = []
    for i in range(1, 6):
        stars = "‚≠ê" * i
        star_buttons.append(InlineKeyboardButton(f"{stars} {i}", callback_data=f"stars:{hobby_name}:{i}:{target_date}"))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 2 —Ä—è–¥–∞: 1-3 –∑–≤–µ–∑–¥—ã –∏ 4-5 –∑–≤–µ–∑–¥
    buttons.append(star_buttons[:3])
    buttons.append(star_buttons[3:])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–µ –±—ã–ª–æ" (0 –∑–≤–µ–∑–¥)
    buttons.append([InlineKeyboardButton("‚ùå –ù–µ –±—ã–ª–æ (0)", callback_data=f"stars:{hobby_name}:0:{target_date}")])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.append([
        InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_hobbies"),
        InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data="select_date")
    ])
    
    return InlineKeyboardMarkup(buttons)


def create_date_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    buttons = []
    dates = get_date_list(7)
    
    for date_str, display in dates:
        buttons.append([InlineKeyboardButton(display, callback_data=f"date:{date_str}")])
    
    buttons.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_hobbies")])
    return InlineKeyboardMarkup(buttons)


def create_all_hobbies_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ —É–≤–ª–µ—á–µ–Ω–∏—è–º–∏"""
    buttons = []
    all_hobbies = get_all_hobbies()
    
    for i in range(0, len(all_hobbies), 2):
        row = []
        for j in range(i, min(i + 2, len(all_hobbies))):
            hobby_key = all_hobbies[j]
            hobby_display = get_hobby_display_name(hobby_key)
            row.append(InlineKeyboardButton(hobby_display, callback_data=f"hobby:{hobby_key}"))
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_hobbies")])
    return InlineKeyboardMarkup(buttons)


def create_stats_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    buttons = []
    dates = get_date_list(7)
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π
    for date_str, display in dates[:3]:  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
        buttons.append([InlineKeyboardButton(f"üìä {display.replace('üìÖ', '')}", callback_data=f"stats:{date_str}")])
    
    buttons.append([InlineKeyboardButton("üìã –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="stats_date")])
    buttons.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_hobbies")])
    return InlineKeyboardMarkup(buttons)


def create_quick_date_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–Ω–µ–π"""
    buttons = []
    dates = get_date_list(3)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
    
    for date_str, display in dates:
        if "–°–µ–≥–æ–¥–Ω—è" in display:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–æ–¥–Ω—è
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—á–µ
        short_display = display.replace("üìÖ ", "").replace(" (", " ").replace(")", "")
        buttons.append([InlineKeyboardButton(f"‚ö° {short_display}", callback_data=f"quick_date:{date_str}")])
    
    buttons.append([InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="select_date")])
    buttons.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_hobbies")])
    return InlineKeyboardMarkup(buttons)


def create_reminders_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    buttons = []
    user_reminders = get_user_reminders(user_id)
    
    if user_reminders:
        buttons.append([InlineKeyboardButton("üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders_list")])
    
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="reminders_add")])
    
    if user_reminders:
        buttons.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="reminders_delete")])
    
    buttons.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_hobbies")])
    return InlineKeyboardMarkup(buttons)


def create_add_reminder_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ —á–∞—Å–æ–≤ –ø–æ 6 –≤ —Ä—è–¥
    hours = list(range(24))
    for i in range(0, 24, 6):
        row = []
        for hour in hours[i:i+6]:
            row.append(InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"add_reminder:{hour}"))
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="reminders")])
    return InlineKeyboardMarkup(buttons)


def create_delete_reminder_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    buttons = []
    user_reminders = sorted(get_user_reminders(user_id))
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for hour in user_reminders:
        buttons.append([InlineKeyboardButton(f"üóëÔ∏è {hour:02d}:00", callback_data=f"delete_reminder:{hour}")])
    
    if not user_reminders:
        buttons.append([InlineKeyboardButton("‚ùå –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminders")])
    
    buttons.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="reminders")])
    return InlineKeyboardMarkup(buttons)