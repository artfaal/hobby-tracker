"""–¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞"""

HELP_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ —É–≤–ª–µ—á–µ–Ω–∏–π —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ ‚≠ê\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
    "/help ‚Äî –ø–æ–º–æ—â—å\n"
    "/quick ‚Äî –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ üöÄ\n"
    "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º üìä\n"
    "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É–≤–ª–µ—á–µ–Ω–∏—è üìã\n"
    "/reminders ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è∞\n\n"
    "‚≠ê –°–∏—Å—Ç–µ–º–∞ –∑–≤–µ–∑–¥ (0.5-8) - –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤—Ä–µ–º—è:\n"
    "üåü = 0.5 —á–∞—Å–∞ (30 –º–∏–Ω—É—Ç)\n"
    "‚≠ê = 1 —á–∞—Å –≤—Ä–µ–º–µ–Ω–∏\n"
    "‚≠ê‚≠ê‚≠ê = 3 —á–∞—Å–∞ –≤—Ä–µ–º–µ–Ω–∏\n"
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê = 5 —á–∞—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–∏\n"
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê = 8 —á–∞—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–∏\n"
    "‚ùå = –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
    "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏!\n"
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quick –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
)

STAR_EXPLANATION = (
    "üåü = 0.5 —á–∞—Å–∞ (30 –º–∏–Ω—É—Ç)\n"
    "‚≠ê = 1 —á–∞—Å –≤—Ä–µ–º–µ–Ω–∏\n"
    "‚≠ê‚≠ê‚≠ê = 3 —á–∞—Å–∞ –≤—Ä–µ–º–µ–Ω–∏\n"
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê = 5 —á–∞—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–∏\n"
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê = 8 —á–∞—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–∏\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
)


def format_stars_display(stars: float) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥"""
    if stars == 0:
        return "‚ùå"
    elif stars == 0.5:
        return "üåü"
    else:
        return "‚≠ê" * int(stars)


def format_hobby_stars_result(hobby_display: str, stars: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ –∑–≤–µ–∑–¥"""
    stars_display = format_stars_display(stars)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if stars == int(stars):
        stars_text = str(int(stars))
    else:
        stars_text = str(stars)
    
    result_text = f"‚úÖ {stars_display} {hobby_display} = {stars_text} –±–∞–ª–ª"
    
    # –°–∫–ª–æ–Ω–µ–Ω–∏–µ
    if stars == 1:
        pass  # "–±–∞–ª–ª"
    elif stars in [0, 5, 6, 7, 8, 9, 10] or (stars % 1 == 0.5):
        result_text += "–æ–≤"
    else:
        result_text += "–∞"
    
    return result_text


def format_stats_message(date_str: str, data: dict, total: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞ –¥–µ–Ω—å"""
    if not data or total == 0:
        return f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date_str}\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å"
    
    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date_str}\n"]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –±–∞–ª–ª–æ–≤
    sorted_data = sorted(data.items(), key=lambda x: x[1], reverse=True)
    
    for hobby, score in sorted_data:
        if score > 0:
            from ..data.files import get_hobby_display_name
            display_name = get_hobby_display_name(hobby)
            stars_display = format_stars_display(score)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if score == int(score):
                score_text = str(int(score))
            else:
                score_text = str(score)
            lines.append(f"{display_name}: {stars_display} ({score_text})")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π –±–∞–ª–ª
    if total == int(total):
        total_text = str(int(total))
    else:
        total_text = str(total)
    
    lines.append(f"\nüéØ –û–±—â–∏–π –±–∞–ª–ª: {total_text}")
    
    return "\n".join(lines)


def get_date_display_name(date_str: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞—Ç—ã"""
    from ..utils.dates import today_str, date_for_time
    
    if date_str == today_str():
        return "—Å–µ–≥–æ–¥–Ω—è"
    elif date_str == date_for_time():
        return "—Å–µ–≥–æ–¥–Ω—è (—Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏)"
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—á–µ—Ä–∞ –ª–∏ —ç—Ç–æ
        import datetime as dt
        try:
            today = dt.datetime.now().date()
            target = dt.datetime.fromisoformat(date_str).date()
            diff = (today - target).days
            
            if diff == 1:
                return "–≤—á–µ—Ä–∞"
            elif diff == 2:
                return "–ø–æ–∑–∞–≤—á–µ—Ä–∞"
            else:
                return date_str
        except:
            return date_str