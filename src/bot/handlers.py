import asyncio
import logging
from telegram import Update
from telegram.ext import ContextTypes

from .keyboards import (
    create_hobby_keyboard, create_score_keyboard, create_date_keyboard,
    create_all_hobbies_keyboard, create_stats_keyboard, create_quick_date_keyboard,
    create_reminders_keyboard, create_add_reminder_keyboard, create_delete_reminder_keyboard,
    create_settings_keyboard, create_aliases_keyboard, create_aliases_list_keyboard
)
from .messages import (
    HELP_TEXT, STAR_EXPLANATION, format_hobby_stars_result, 
    format_stats_message, get_date_display_name
)
from ..data.files import (
    save_hobby_to_history, get_all_hobbies, get_hobby_display_name, get_all_aliases, add_alias
)
from ..data.reminders import (
    add_reminder, remove_reminder, get_user_reminders
)
from ..data.sheets import SheetsManager
from ..utils.dates import date_for_time
from ..utils.config import SPREADSHEET_ID

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis/DB)
user_states = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SheetsManager
sheets = SheetsManager()

# –õ–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)





async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "unknown"
    logger.info(f"Start command from {username} ({user_id})")
    await update.message.reply_text(HELP_TEXT)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(HELP_TEXT)


async def quick_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quick - –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "unknown"
    logger.info(f"Quick command from {username} ({user_id})")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é
    user_states.pop(user_id, None)
    
    target_date = date_for_time()
    keyboard = create_hobby_keyboard()
    date_display = get_date_display_name(target_date)
    await update.message.reply_text(
        f"üöÄ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {date_display}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–ª–µ—á–µ–Ω–∏–µ:", 
        reply_markup=keyboard
    )


async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    keyboard = create_stats_keyboard()
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=keyboard
    )


async def list_all_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list - –≤—Å–µ —É–≤–ª–µ—á–µ–Ω–∏—è"""
    all_hobbies = get_all_hobbies()
    if not all_hobbies:
        await update.message.reply_text(
            "üìã –ü–æ–∫–∞ –Ω–µ—Ç —É–≤–ª–µ—á–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quick —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ!"
        )
    else:
        hobbies_text = "\n".join([f"‚Ä¢ {get_hobby_display_name(h)}" for h in all_hobbies])
        message = f"üìã –í—Å–µ –≤–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è ({len(all_hobbies)}):\n\n{hobbies_text}"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(message) > 4000:
            hobbies_text = "\n".join([f"‚Ä¢ {get_hobby_display_name(h)}" for h in all_hobbies[:30]])
            message = f"üìã –í–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è ({len(all_hobbies)}):\n\n{hobbies_text}"
            if len(all_hobbies) > 30:
                message += f"\n\n... –∏ –µ—â—ë {len(all_hobbies) - 30} —É–≤–ª–µ—á–µ–Ω–∏–π"
        
        await update.message.reply_text(message)


async def reminders_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reminders - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = update.message.from_user.id
    keyboard = create_reminders_keyboard(user_id)
    user_reminders = get_user_reminders(user_id)
    
    if user_reminders:
        reminders_text = ", ".join([f"{h:02d}:00" for h in sorted(user_reminders)])
        message = f"‚è∞ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminders_text}"
    else:
        message = "‚è∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    
    await update.message.reply_text(message, reply_markup=keyboard)




async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data.startswith("hobby:"):
        await handle_hobby_selection(query, user_id, data)
    elif data.startswith("stars:"):
        await handle_stars_selection(query, user_id, data)
    elif data.startswith("date:"):
        await handle_date_selection(query, user_id, data)
    elif data.startswith("quick_date:"):
        await handle_quick_date_selection(query, user_id, data)
    elif data.startswith("stats"):
        await handle_stats_selection(query, user_id, data)
    elif data == "list_all":
        await handle_list_all(query)
    elif data == "add_new":
        await handle_add_new(query, user_id)
    elif data == "select_date":
        await handle_select_date(query)
    elif data == "quick_dates":
        await handle_quick_dates(query)
    elif data == "back_to_hobbies":
        await handle_back_to_hobbies(query)
    elif data == "today":
        await handle_today_selection(query, user_id)
    elif data.startswith("reminder"):
        await handle_reminders(query, user_id, data)
    elif data.startswith("add_reminder"):
        await handle_add_reminder(query, user_id, data)
    elif data.startswith("delete_reminder"):
        await handle_delete_reminder(query, user_id, data)
    elif data == "settings":
        await handle_settings(query)
    elif data.startswith("aliases"):
        await handle_aliases(query, user_id, data)


async def handle_hobby_selection(query, user_id: int, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–≤–ª–µ—á–µ–Ω–∏—è"""
    hobby_key = data.split(":", 1)[1]
    hobby_display = get_hobby_display_name(hobby_key)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_date = date_for_time()
    if user_id in user_states and user_states[user_id].startswith("selected_date:"):
        target_date = user_states[user_id].split(":", 1)[1]
    
    keyboard = create_score_keyboard(hobby_key, target_date)
    
    date_display = get_date_display_name(target_date)
    await query.edit_message_text(
        f"‚≠ê –û—Ü–µ–Ω–∏—Ç–µ '{hobby_display}' –Ω–∞ {date_display}:\n\n{STAR_EXPLANATION}",
        reply_markup=keyboard
    )


async def handle_stars_selection(query, user_id: int, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    parts = data.split(":")
    if len(parts) >= 4:
        hobby_key = parts[1]
        stars = int(parts[2])
        target_date = parts[3]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–ª–µ—á–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_hobby_to_history(hobby_key)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
        score_values = {hobby_key: stars}
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        hobby_display = get_hobby_display_name(hobby_key)
        result_text = format_hobby_stars_result(hobby_display, stars)
        
        await query.edit_message_text(result_text)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É–≤–ª–µ—á–µ–Ω–∏–π
        current_date = date_for_time()
        show_today = target_date != current_date
        keyboard = create_hobby_keyboard(show_today_button=show_today)
        date_display = get_date_display_name(target_date)
        await asyncio.sleep(0.5)
        await query.edit_message_text(
            f"üöÄ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {date_display}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ:",
            reply_markup=keyboard
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets –≤ —Ñ–æ–Ω–µ
        try:
            sheets.write_values(score_values, target_date)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏


async def handle_date_selection(query, user_id: int, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    selected_date = data.split(":", 1)[1]
    user_states[user_id] = f"selected_date:{selected_date}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è" –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
    current_date = date_for_time()
    show_today = selected_date != current_date
    keyboard = create_hobby_keyboard(show_today_button=show_today)
    date_display = get_date_display_name(selected_date)
    await query.edit_message_text(
        f"üöÄ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {date_display}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–ª–µ—á–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )


async def handle_quick_date_selection(query, user_id: int, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    selected_date = data.split(":", 1)[1]
    user_states[user_id] = f"selected_date:{selected_date}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è" –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
    current_date = date_for_time()
    show_today = selected_date != current_date
    keyboard = create_hobby_keyboard(show_today_button=show_today)
    date_display = get_date_display_name(selected_date)
    await query.edit_message_text(
        f"üöÄ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {date_display}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–ª–µ—á–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )


async def handle_stats_selection(query, user_id: int, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if data == "stats":
        keyboard = create_stats_keyboard()
        await query.edit_message_text(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=keyboard
        )
    elif data == "stats_date":
        keyboard = create_date_keyboard()
        await query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=keyboard
        )
        user_states[user_id] = "stats_mode"
    elif data.startswith("stats:"):
        target_date = data.split(":", 1)[1]
        await show_stats_for_date(query, target_date)


async def show_stats_for_date(query, target_date: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        data = sheets.get_day_data(target_date)
        total = sheets.get_total_for_date(target_date)
        
        message = format_stats_message(target_date, data, total)
        
        keyboard = create_stats_keyboard()
        await query.edit_message_text(message, reply_markup=keyboard)
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def handle_list_all(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —É–≤–ª–µ—á–µ–Ω–∏–π"""
    all_hobbies = get_all_hobbies()
    if not all_hobbies:
        await query.edit_message_text("üìã –ü–æ–∫–∞ –Ω–µ—Ç —É–≤–ª–µ—á–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏.")
    else:
        keyboard = create_all_hobbies_keyboard()
        await query.edit_message_text(
            f"üìã –í—Å–µ –≤–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è ({len(all_hobbies)}):",
            reply_markup=keyboard
        )


async def handle_add_new(query, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–≤–ª–µ—á–µ–Ω–∏—è"""
    username = query.from_user.username or "unknown"
    target_date = date_for_time()
    if user_id in user_states and user_states[user_id].startswith("selected_date:"):
        target_date = user_states[user_id].split(":", 1)[1]
    
    user_states[user_id] = f"waiting_new_hobby:{target_date}"
    logger.info(f"Add new hobby requested by {username} ({user_id}) for date {target_date}")
    await query.edit_message_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–ª–µ—á–µ–Ω–∏—è:")


async def handle_select_date(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    keyboard = create_date_keyboard()
    await query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=keyboard
    )


async def handle_quick_dates(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç"""
    keyboard = create_quick_date_keyboard()
    await query.edit_message_text(
        "‚ö° –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –¥–Ω—è:",
        reply_markup=keyboard
    )


async def handle_today_selection(query, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é
    user_states.pop(user_id, None)
    
    target_date = date_for_time()
    keyboard = create_hobby_keyboard()  # –ë–µ–∑ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è" –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    date_display = get_date_display_name(target_date)
    await query.edit_message_text(
        f"üöÄ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {date_display}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–ª–µ—á–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )


async def handle_back_to_hobbies(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É–≤–ª–µ—á–µ–Ω–∏–π"""
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_date = date_for_time()
    if user_id in user_states and user_states[user_id].startswith("selected_date:"):
        target_date = user_states[user_id].split(":", 1)[1]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è" –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
    current_date = date_for_time()
    show_today = target_date != current_date
    keyboard = create_hobby_keyboard(show_today_button=show_today)
    date_display = get_date_display_name(target_date)
    await query.edit_message_text(
        f"üöÄ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {date_display}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–ª–µ—á–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )



async def reminders_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reminders - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    user_id = update.message.from_user.id
    keyboard = create_reminders_keyboard(user_id)
    user_reminders = get_user_reminders(user_id)
    
    if user_reminders:
        reminders_text = ", ".join([f"{h:02d}:00" for h in sorted(user_reminders)])
        message = f"‚è∞ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminders_text}"
    else:
        message = "‚è∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    
    await update.message.reply_text(message, reply_markup=keyboard)


async def handle_reminders(query, user_id: int, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    if data == "reminders":
        keyboard = create_reminders_keyboard(user_id)
        user_reminders = get_user_reminders(user_id)
        
        if user_reminders:
            reminders_text = ", ".join([f"{h:02d}:00" for h in sorted(user_reminders)])
            message = f"‚è∞ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminders_text}"
        else:
            message = "‚è∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        
        await query.edit_message_text(message, reply_markup=keyboard)
    
    elif data == "reminders_list":
        user_reminders = sorted(get_user_reminders(user_id))
        if user_reminders:
            reminders_text = "\n".join([f"‚Ä¢ {h:02d}:00" for h in user_reminders])
            message = f"üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n{reminders_text}"
        else:
            message = "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        
        keyboard = create_reminders_keyboard(user_id)
        await query.edit_message_text(message, reply_markup=keyboard)
    
    elif data == "reminders_add":
        keyboard = create_add_reminder_keyboard()
        await query.edit_message_text(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    
    elif data == "reminders_delete":
        keyboard = create_delete_reminder_keyboard(user_id)
        await query.edit_message_text(
            "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )


async def handle_add_reminder(query, user_id: int, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    hour = int(data.split(":", 1)[1])
    success = add_reminder(user_id, hour)
    
    if success:
        message = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {hour:02d}:00 –¥–æ–±–∞–≤–ª–µ–Ω–æ!"
    else:
        message = f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {hour:02d}:00 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    keyboard = create_reminders_keyboard(user_id)
    await query.edit_message_text(message, reply_markup=keyboard)


async def handle_delete_reminder(query, user_id: int, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    hour = int(data.split(":", 1)[1])
    success = remove_reminder(user_id, hour)
    
    if success:
        message = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {hour:02d}:00 —É–¥–∞–ª–µ–Ω–æ!"
    else:
        message = f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {hour:02d}:00 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    keyboard = create_reminders_keyboard(user_id)
    await query.edit_message_text(message, reply_markup=keyboard)


async def handle_settings(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = create_settings_keyboard()
    await query.edit_message_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
        reply_markup=keyboard
    )


async def handle_aliases(query, user_id: int, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–∞–º–∏"""
    if data == "aliases":
        keyboard = create_aliases_keyboard()
        await query.edit_message_text(
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞–º–∏:",
            reply_markup=keyboard
        )
    
    elif data == "aliases_list":
        aliases = get_all_aliases()
        keyboard = create_aliases_list_keyboard()
        
        if aliases:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª–∏–∞—Å—ã –ø–æ hobby_key –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            aliases_by_hobby = {}
            for hobby_key, display_name in aliases:
                if hobby_key not in aliases_by_hobby:
                    aliases_by_hobby[hobby_key] = []
                aliases_by_hobby[hobby_key].append(display_name)
            
            message_lines = ["üìã –í—Å–µ –∞–ª–∏–∞—Å—ã:\n"]
            for hobby_key, display_names in aliases_by_hobby.items():
                display_text = ", ".join(display_names)
                message_lines.append(f"‚Ä¢ {hobby_key} ‚Üí {display_text}")
            
            message = "\n".join(message_lines)
        else:
            message = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–ª–∏–∞—Å–æ–≤"
        
        await query.edit_message_text(message, reply_markup=keyboard)
    
    elif data == "aliases_add":
        user_states[user_id] = "awaiting_alias"
        await query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–∏–∞—Å–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–æ–±–±–∏ = –ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ = üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ`",
            parse_mode="Markdown"
        )
    
    elif data == "aliases_noop":
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        pass


async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–ª–∏–∞—Å–æ–≤ –∏ –Ω–æ–≤—ã—Ö —É–≤–ª–µ—á–µ–Ω–∏–π)"""
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "unknown"
    text = update.message.text.strip()
    
    logger.info(f"Text message from {username} ({user_id}): '{text}', state: {user_states.get(user_id, 'none')}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–ª–µ—á–µ–Ω–∏—è
    if user_id in user_states and user_states[user_id].startswith("waiting_new_hobby:"):
        hobby_name = text.lower()
        target_date = user_states[user_id].split(":", 1)[1]
        user_states.pop(user_id, None)
        
        logger.info(f"Adding new hobby '{hobby_name}' for user {username} ({user_id}) on {target_date}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
        keyboard = create_score_keyboard(hobby_name, target_date)
        
        date_display = get_date_display_name(target_date)
        await update.message.reply_text(
            f"‚≠ê –û—Ü–µ–Ω–∏—Ç–µ '{hobby_name.capitalize()}' –Ω–∞ {date_display}:\n\n{STAR_EXPLANATION}",
            reply_markup=keyboard
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞
    elif user_id in user_states and user_states[user_id] == "awaiting_alias":
        if "=" in text:
            parts = text.split("=", 1)
            hobby_key = parts[0].strip()
            display_name = parts[1].strip()
            
            if hobby_key and display_name:
                success = add_alias(hobby_key, display_name)
                if success:
                    keyboard = create_aliases_keyboard()
                    await update.message.reply_text(
                        f"‚úÖ –ê–ª–∏–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        f"‚Ä¢ {hobby_key} ‚Üí {display_name}",
                        reply_markup=keyboard
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–ª–∏–∞—Å–∞")
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "`–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–æ–±–±–∏ = –ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`",
                    parse_mode="Markdown"
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–æ–±–±–∏ = –ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`",
                parse_mode="Markdown"
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(user_id, None)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–≤–ª–µ—á–µ–Ω–∏—è –∏–ª–∏ –∞–ª–∏–∞—Å–∞, –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ /quick
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quick –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —É–≤–ª–µ—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!"
        )