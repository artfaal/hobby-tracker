import os
import shutil
import logging
from datetime import datetime
from ..utils.config import HOBBIES_HISTORY_FILE, ALIASES_FILE

# –õ–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


def norm_hobby(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–æ–±–±–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    name = name.strip().lower()
    replacements = {"—ë": "–µ"}
    for a, b in replacements.items():
        name = name.replace(a, b)
    return name


def load_aliases() -> dict[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–ª–∏–∞—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–ª–µ—á–µ–Ω–∏–π"""
    aliases = {}
    if os.path.exists(ALIASES_FILE):
        try:
            with open(ALIASES_FILE, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if '=' in line:
                        hobby_name, display_name = line.split('=', 1)
                        aliases[hobby_name.strip().lower()] = display_name.strip()
        except Exception:
            pass
    return aliases


def save_aliases(aliases: dict[str, str]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–ª–∏–∞—Å—ã –≤ —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(ALIASES_FILE), exist_ok=True)
        with open(ALIASES_FILE, 'w', encoding='utf-8') as f:
            for hobby_name, display_name in aliases.items():
                f.write(f"{hobby_name}={display_name}\n")
    except Exception:
        pass


def get_hobby_display_name(hobby_name: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    aliases = load_aliases()
    norm_name = norm_hobby(hobby_name)
    if norm_name in aliases:
        return aliases[norm_name]
    return f"üìå {hobby_name.capitalize()}"


def get_all_aliases() -> list[tuple[str, str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–ª–∏–∞—Å—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ (alias, hobby_key)"""
    aliases = load_aliases()
    return [(hobby_key, display_name) for hobby_key, display_name in aliases.items()]


def add_alias(hobby_key: str, display_name: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∞–ª–∏–∞—Å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ"""
    if not hobby_key.strip() or not display_name.strip():
        return False
    
    aliases = load_aliases()
    norm_key = norm_hobby(hobby_key)
    aliases[norm_key] = display_name.strip()
    save_aliases(aliases)
    return True


def get_recent_hobbies(limit: int = 20) -> list[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —É–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(HOBBIES_HISTORY_FILE):
        return []
    
    try:
        with open(HOBBIES_HISTORY_FILE, 'r', encoding='utf-8') as f:
            recent = [line.strip() for line in f.readlines() if line.strip()]
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
        seen = set()
        unique_recent = []
        for hobby in recent:
            if hobby not in seen:
                seen.add(hobby)
                unique_recent.append(hobby)
        
        return unique_recent[:limit]
    except Exception:
        return []


def get_all_hobbies() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    return get_recent_hobbies(limit=1000)


def create_backup(file_path: str) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ —Å timestamp"""
    if os.path.exists(file_path):
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f"{file_path}.backup_{timestamp}"
            shutil.copy2(file_path, backup_path)
            logger.info(f"Created backup: {backup_path}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
            backup_dir = os.path.dirname(file_path)
            base_name = os.path.basename(file_path)
            backup_files = [f for f in os.listdir(backup_dir) if f.startswith(f"{base_name}.backup_")]
            backup_files.sort(reverse=True)
            
            for old_backup in backup_files[5:]:  # –£–¥–∞–ª—è–µ–º –≤—Å—ë –∫—Ä–æ–º–µ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                try:
                    os.remove(os.path.join(backup_dir, old_backup))
                    logger.info(f"Removed old backup: {old_backup}")
                except Exception as e:
                    logger.error(f"Failed to remove old backup {old_backup}: {e}")
                    
        except Exception as e:
            logger.error(f"Failed to create backup for {file_path}: {e}")


def save_hobby_to_history(hobby_name: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–ª–µ—á–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    logger.info(f"Saving hobby to history: '{hobby_name}'")
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    create_backup(HOBBIES_HISTORY_FILE)
    
    recent = get_recent_hobbies()
    
    # –£–±–∏—Ä–∞–µ–º hobby_name –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
    if hobby_name in recent:
        recent.remove(hobby_name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
    recent.insert(0, hobby_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–º–∞–∫—Å–∏–º—É–º 20 –∑–∞–ø–∏—Å–µ–π)
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(HOBBIES_HISTORY_FILE), exist_ok=True)
        with open(HOBBIES_HISTORY_FILE, 'w', encoding='utf-8') as f:
            for hobby in recent[:20]:
                f.write(f"{hobby}\n")
        logger.info(f"Successfully saved {len(recent[:20])} hobbies to history file")
    except Exception as e:
        logger.error(f"Failed to save hobby '{hobby_name}' to history: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
        try:
            backup_files = [f for f in os.listdir(os.path.dirname(HOBBIES_HISTORY_FILE)) 
                           if f.startswith(f"{os.path.basename(HOBBIES_HISTORY_FILE)}.backup_")]
            if backup_files:
                latest_backup = sorted(backup_files)[-1]
                backup_path = os.path.join(os.path.dirname(HOBBIES_HISTORY_FILE), latest_backup)
                shutil.copy2(backup_path, HOBBIES_HISTORY_FILE)
                logger.info(f"Restored from backup: {latest_backup}")
        except Exception as restore_error:
            logger.error(f"Failed to restore from backup: {restore_error}")


def create_sample_aliases() -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(os.path.dirname(ALIASES_FILE), exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∑–≤–µ–∑–¥
    from .stars import create_default_stars_file
    create_default_stars_file()
    
    # –°–æ–∑–¥–∞–µ–º aliases.txt –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(ALIASES_FILE):
        example_file = ALIASES_FILE + ".example"
        if os.path.exists(example_file):
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
            try:
                import shutil
                shutil.copy2(example_file, ALIASES_FILE)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω {ALIASES_FILE} –∏–∑ –ø—Ä–∏–º–µ—Ä–∞")
            except Exception:
                # –ï—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∞–ª–∏–∞—Å—ã
                sample_aliases = {
                    "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "—é—Ç—É–±": "üì∫ YouTube", 
                    "—á—Ç–µ–Ω–∏–µ": "üìö –ß—Ç–µ–Ω–∏–µ",
                    "—Å–ø–æ—Ä—Ç": "üèÉ –°–ø–æ—Ä—Ç",
                    "–º—É–∑—ã–∫–∞": "üéµ –ú—É–∑—ã–∫–∞",
                    "–∏–≥—Ä—ã": "üéÆ –ò–≥—Ä—ã",
                    "–º–æ—Ç–æ": "üèçÔ∏è –ú–æ—Ç–æ"
                }
                save_aliases(sample_aliases)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω {ALIASES_FILE} —Å –±–∞–∑–æ–≤—ã–º–∏ –∞–ª–∏–∞—Å–∞–º–∏")
        else:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∞–ª–∏–∞—Å—ã –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–∞
            sample_aliases = {
                "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "—é—Ç—É–±": "üì∫ YouTube",
                "—á—Ç–µ–Ω–∏–µ": "üìö –ß—Ç–µ–Ω–∏–µ", 
                "—Å–ø–æ—Ä—Ç": "üèÉ –°–ø–æ—Ä—Ç",
                "–º—É–∑—ã–∫–∞": "üéµ –ú—É–∑—ã–∫–∞",
                "–∏–≥—Ä—ã": "üéÆ –ò–≥—Ä—ã",
                "–º–æ—Ç–æ": "üèçÔ∏è –ú–æ—Ç–æ"
            }
            save_aliases(sample_aliases)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω {ALIASES_FILE} —Å –±–∞–∑–æ–≤—ã–º–∏ –∞–ª–∏–∞—Å–∞–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º hobbies_history.txt –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(HOBBIES_HISTORY_FILE):
        example_file = HOBBIES_HISTORY_FILE + ".example"
        if os.path.exists(example_file):
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
            try:
                import shutil
                shutil.copy2(example_file, HOBBIES_HISTORY_FILE)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω {HOBBIES_HISTORY_FILE} –∏–∑ –ø—Ä–∏–º–µ—Ä–∞")
            except Exception:
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                try:
                    with open(HOBBIES_HISTORY_FILE, 'w', encoding='utf-8') as f:
                        f.write("")
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π {HOBBIES_HISTORY_FILE}")
                except Exception:
                    pass
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–∞
            try:
                with open(HOBBIES_HISTORY_FILE, 'w', encoding='utf-8') as f:
                    f.write("")
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π {HOBBIES_HISTORY_FILE}")
            except Exception:
                pass