import os
from ..utils.config import HOBBIES_HISTORY_FILE, ALIASES_FILE


def norm_hobby(name: str) -> str:
    """ะะพัะผะฐะปะธะทัะตั ะฝะฐะทะฒะฐะฝะธะต ัะพะฑะฑะธ ะดะปั ัะพะฟะพััะฐะฒะปะตะฝะธั"""
    name = name.strip().lower()
    replacements = {"ั": "ะต"}
    for a, b in replacements.items():
        name = name.replace(a, b)
    return name


def load_aliases() -> dict[str, str]:
    """ะะฐะณััะถะฐะตั ะฐะปะธะฐัั ะดะปั ะพัะพะฑัะฐะถะตะฝะธั ัะฒะปะตัะตะฝะธะน"""
    aliases = {}
    if os.path.exists(ALIASES_FILE):
        try:
            with open(ALIASES_FILE, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if '=' in line:
                        hobby_name, display_name = line.split('=', 1)
                        aliases[hobby_name.strip().lower()] = display_name.strip()
        except Exception:
            pass
    return aliases


def save_aliases(aliases: dict[str, str]) -> None:
    """ะกะพััะฐะฝัะตั ะฐะปะธะฐัั ะฒ ัะฐะนะป"""
    try:
        with open(ALIASES_FILE, 'w', encoding='utf-8') as f:
            for hobby_name, display_name in aliases.items():
                f.write(f"{hobby_name}={display_name}\n")
    except Exception:
        pass


def get_hobby_display_name(hobby_name: str) -> str:
    """ะะพะปััะฐะตั ะบัะฐัะธะฒะพะต ะฝะฐะทะฒะฐะฝะธะต ัะฒะปะตัะตะฝะธั ะดะปั ะพัะพะฑัะฐะถะตะฝะธั"""
    aliases = load_aliases()
    norm_name = norm_hobby(hobby_name)
    if norm_name in aliases:
        return aliases[norm_name]
    return f"๐ {hobby_name.capitalize()}"


def get_recent_hobbies(limit: int = 20) -> list[str]:
    """ะะฐะณััะถะฐะตั ะฟะพัะปะตะดะฝะธะต ะธัะฟะพะปัะทะพะฒะฐะฝะฝัะต ัะฒะปะตัะตะฝะธั ะธะท ัะฐะนะปะฐ"""
    if not os.path.exists(HOBBIES_HISTORY_FILE):
        return []
    
    try:
        with open(HOBBIES_HISTORY_FILE, 'r', encoding='utf-8') as f:
            recent = [line.strip() for line in f.readlines() if line.strip()]
        
        # ะฃะฑะธัะฐะตะผ ะดัะฑะปะธะบะฐัั, ัะพััะฐะฝัั ะฟะพััะดะพะบ
        seen = set()
        unique_recent = []
        for hobby in recent:
            if hobby not in seen:
                seen.add(hobby)
                unique_recent.append(hobby)
        
        return unique_recent[:limit]
    except Exception:
        return []


def get_all_hobbies() -> list[str]:
    """ะะพะปััะฐะตั ะฒัะต ัะฒะปะตัะตะฝะธั ะธะท ะธััะพัะธะธ"""
    return get_recent_hobbies(limit=1000)


def save_hobby_to_history(hobby_name: str) -> None:
    """ะกะพััะฐะฝัะตั ัะฒะปะตัะตะฝะธะต ะฒ ะฝะฐัะฐะปะพ ัะฐะนะปะฐ ะธััะพัะธะธ"""
    recent = get_recent_hobbies()
    
    # ะฃะฑะธัะฐะตะผ hobby_name ะธะท ัะฟะธัะบะฐ, ะตัะปะธ ะพะฝ ัะฐะผ ะตััั
    if hobby_name in recent:
        recent.remove(hobby_name)
    
    # ะะพะฑะฐะฒะปัะตะผ ะฒ ะฝะฐัะฐะปะพ
    recent.insert(0, hobby_name)
    
    # ะกะพััะฐะฝัะตะผ ะฒ ัะฐะนะป (ะผะฐะบัะธะผัะผ 20 ะทะฐะฟะธัะตะน)
    try:
        with open(HOBBIES_HISTORY_FILE, 'w', encoding='utf-8') as f:
            for hobby in recent[:20]:
                f.write(f"{hobby}\n")
    except Exception:
        pass


def create_sample_aliases() -> None:
    """ะกะพะทะดะฐะตั ะฟัะธะผะตั ัะฐะนะปะฐ ะฐะปะธะฐัะพะฒ ะฟัะธ ะฟะตัะฒะพะผ ะทะฐะฟััะบะต"""
    if not os.path.exists(ALIASES_FILE):
        sample_aliases = {
            "ะฟัะพะณัะฐะผะผะธัะพะฒะฐะฝะธะต": "๐ป ะัะพะณัะฐะผะผะธัะพะฒะฐะฝะธะต",
            "ัััะฑ": "๐บ YouTube",
            "ััะตะฝะธะต": "๐ ะงัะตะฝะธะต", 
            "ัะฟะพัั": "๐ ะกะฟะพัั",
            "ะผัะทัะบะฐ": "๐ต ะัะทัะบะฐ",
            "ะธะณัั": "๐ฎ ะะณัั",
            "ะผะพัะพ": "๐๏ธ ะะพัะพ"
        }
        save_aliases(sample_aliases)