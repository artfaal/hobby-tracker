import asyncio
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Bot
from telegram.error import TelegramError

from .config import TZ_NAME, REMINDER_THRESHOLD
from ..data.reminders import get_reminders_for_hour
from ..data.sheets import SheetsManager
from ..utils.dates import date_for_time
from .dates import get_tz


class ReminderScheduler:
    def __init__(self, bot_token: str):
        self.bot = Bot(token=bot_token)
        self.scheduler = AsyncIOScheduler(timezone=get_tz())
        self.sheets = SheetsManager()
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
        self.scheduler.add_job(
            self._check_reminders,
            CronTrigger(minute=0, timezone=get_tz()),  # –ö–∞–∂–¥—ã–π —á–∞—Å —Ä–æ–≤–Ω–æ –≤ 00 –º–∏–Ω—É—Ç
            id='hourly_reminders'
        )
        
        self.scheduler.start()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.scheduler.running:
            self.scheduler.shutdown(wait=False)
            print("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _check_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞"""
        try:
            current_hour = datetime.now(tz=get_tz()).hour
            user_ids = get_reminders_for_hour(current_hour)
            
            for user_id in user_ids:
                await self._send_reminder(user_id)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def _send_reminder(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = date_for_time()
            today_data = self.sheets.get_day_data(today)
            today_total = sum(today_data.values()) if today_data else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üìù –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
            
            if today_total > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ
                if today_total < REMINDER_THRESHOLD:
                    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    activities = []
                    for hobby, score in today_data.items():
                        if score > 0:
                            from ..data.files import get_hobby_display_name
                            display_name = get_hobby_display_name(hobby)
                            activities.append(f"{display_name}:{score}")
                    
                    activities_text = ", ".join(activities)
                    message = (
                        f"‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è —Ç–æ–ª—å–∫–æ {today_total} –∑–≤–µ–∑–¥ ({activities_text}). "
                        f"–ú–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ –¥–µ–ª–∞–ª–∏?\n\nüìù –ù–∞–∂–º–∏—Ç–µ /quick –¥–ª—è –∑–∞–ø–∏—Å–∏!"
                    )
                else:
                    # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    message = (
                        f"üìù –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! "
                        f"–°–µ–≥–æ–¥–Ω—è —É–∂–µ {today_total} –∑–≤–µ–∑–¥.\n\n"
                        f"–ù–∞–∂–º–∏—Ç–µ /quick –¥–ª—è –∑–∞–ø–∏—Å–∏!"
                    )
            else:
                # –ï—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ
                message = (
                    "üìù –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! "
                    "–ü–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ /quick –¥–ª—è –Ω–∞—á–∞–ª–∞!"
                )
            
            await self.bot.send_message(chat_id=user_id, text=message)
            
        except TelegramError as e:
            if e.message == "Forbidden: bot was blocked by the user":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                from ..data.reminders import clear_user_reminders
                cleared = clear_user_reminders(user_id)
                print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω–æ {cleared} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
_scheduler_instance = None


def get_scheduler(bot_token: str = None) -> ReminderScheduler:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global _scheduler_instance
    if _scheduler_instance is None and bot_token:
        _scheduler_instance = ReminderScheduler(bot_token)
    return _scheduler_instance


def start_scheduler(bot_token: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    scheduler = get_scheduler(bot_token)
    if scheduler:
        scheduler.start()


def stop_scheduler():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    global _scheduler_instance
    if _scheduler_instance:
        _scheduler_instance.stop()
        _scheduler_instance = None